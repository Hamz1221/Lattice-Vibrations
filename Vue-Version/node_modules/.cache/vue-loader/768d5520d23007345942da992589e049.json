{"remainingRequest":"/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/src/Page2.vue?vue&type=template&id=031ed1da&","dependencies":[{"path":"/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/src/Page2.vue","mtime":1597921999977},{"path":"/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/darrenlean/Documents/Visualisations/Lattice-Vibrations/Vue-Version/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}